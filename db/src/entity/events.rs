//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.2

use mini_cqrs::Event;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "events")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub payload: Json,
    pub aggregate_id: String,
    pub timestamp: ChronoDateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl From<Event> for Model {
    fn from(event: Event) -> Self {
        Self {
            id: event.id,
            name: event.event_type,
            payload: event.payload,
            aggregate_id: event.aggregate_id,
            timestamp: event.timestamp,
        }
    }
}

impl Into<Event> for Model {
    fn into(self) -> Event {
        Event {
            id: self.id,
            aggregate_id: self.aggregate_id,
            event_type: self.name,
            payload: self.payload,
            timestamp: self.timestamp,
            version: 1,
        }
    }
}
